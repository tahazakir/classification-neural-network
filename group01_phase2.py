# -*- coding: utf-8 -*-
"""Group01_Phase2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lmE6IQRQQb0sOM08GF9eQzYq59xldudn

# CS331 - Spring 2021 - Phase 2 [10%]

*__Submission Guidelines:__*
- Naming convention for submission of this notebook is `groupXX_Phase2.ipynb` where XX needs to be replaced by your group number. For example: group 1 would rename their notebook to `group01_Phase2.ipynb`
- Only the group lead is supposed to make the submission
- Only the single .ipynb file needs to be submitted via LMS 
- All the cells <b>must</b> be run once before submission. If your submission's cells are not showing the results (plots etc.), marks wil be deducted
- Only the code written within this notebook will be considered while grading. No other files will be entertained
- You are advised to follow good programming practies including approriate variable naming and making use of logical comments 

The university honor code should be maintained. Any violation, if found, will result in disciplinary action.

#### <b>Introduction</b> 
This is the second of the three phases of this offering's project. Having implemented a neural network from scratch using for loops, you will now be using vectorization (wherever applicable) to improve the performance of the model and equip it to deal with the complete Fashion MNIST Dataset.

The dataset consists of 70,000 images of fashion/clothing items belonging to 10 different categories/classes. It has furhter been divided into 60,000 training images and 10,000 test images and each image is a 28*28 grayscale image (hence 1 color channel). It is recommended that you go through  [this link](https://www.kaggle.com/zalando-research/fashionmnist) to familiarize yourself with the dataset.

In this phase, you will load the required dataset from the keras datasets library. To get the best results, you will need to tweak hyperparameters, and the best values will not necessarily be the ones you performed for your computations in phase 1 with.

###### <b>IMPORTANT

In this phase, you will be required to implement multiple hidden layers (>= 2) alongside the input and output layer, as opposed to the one you implemented in phase 1. This may require some revision to the logic of the code you use.

###### Modification of the provided code without prior discussion with the TAs will result in a grade deduction</b>

---

###### <b>Side note</b>
The `plot_model` method will only work if you have the `pydot` python package installed along with [Graphviz](https://graphviz.gitlab.io/download/). If you do not wish to use this then simply comment out the import for `pydot`

###### <b>Need Help?</b>
If you need help, please refer to the course staff ASAP and do not wait till the last moment as they might not be available on very short notice close to deadlines

#### <b>Before You Begin</b>

Skeleton code is provided to get you started. The main methods that you need to implement correspond to the four steps of the training process of a NN which are as follows:
1. Initialize variables and initialize weights
2. Forward pass
3. Backward pass AKA Backpropogation
4. Weight Update AKA Gradient Descent

__Look for comments in the code to see where you are supposed to write your code__ 

A `fit` function is what combines the previous three functions and overall trains the network to __fit__ to the provided training examples. The provided `fit` methods requires all the four steps of the training process to be working correctly. The function has been setup in a way that it expects the above four methods to take particular inputs and return particular outputs. __You are supposed to work within this restriction__ 



__To see if your model is working correctly, you need to make sure that your model loss is going down during training__

__The number of hidden layers needs to be >= 2, and the implementation should not crash if we attempt to arbitrarily change it__
"""

# Commented out IPython magic to ensure Python compatibility.
# making all the necessary imports here

import numpy as np
import pandas as pd
import time
# %matplotlib inline
import matplotlib.pyplot as plt
plt.style.use('seaborn')
from IPython.display import Image
import pydot
from tqdm import tqdm_notebook
import seaborn as sns
from keras.datasets import fashion_mnist
from sklearn.model_selection import train_test_split
from keras.utils import np_utils
from sklearn.datasets import make_moons
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.metrics import confusion_matrix,classification_report
from google.colab import drive
import glob
import cv2
import sys

# This function will be used to plot the confusion matrix at the end of this notebook

def plot_confusion_matrix(conf_mat):
    classes = ['T-shirt/top','Trouser/pants','Pullover shirt','Dress','Coat','Sandal','Shirt','Sneaker','Bag','Ankle boot']
    df_cm = pd.DataFrame(conf_mat,classes,classes)
    plt.figure(figsize=(15,9))
    sns.set(font_scale=1.4)
    sns.heatmap(df_cm, annot=True,annot_kws={"size": 16})
    plt.show()

class_labels = ['T-shirt/top','Trouser/pants','Pullover shirt','Dress','Coat','Sandal','Shirt','Sneaker','Bag','Ankle boot']

# Enter group lead's roll number here. This will be used for plotting purposes

rollnumber = 23100088

"""#### __Dataset from Keras Library__

The required library has been imported for you as fashion_mnist. Use it to load the train and test data accordingly.
"""

classes = 10 # Do not change this

# Download Fashion MNIST dataset
###### Code Here ######
data_set = fashion_mnist.load_data()

# Split the fashion MNIST dataset into train and test sets
# Convert y_train and y_test to categorical binary values 
###### Code Here ######
X_train_temp = data_set[0][0]
y_train_temp = data_set[0][1]
X_test_temp = data_set[1][0]
y_test_temp = data_set[1][1]
trainy = np_utils.to_categorical(y_train_temp)
testy = np_utils.to_categorical(y_test_temp)

#Reshape train and test images as one-dimensional arrays
###### Code Here ######
test_data = []
for i in range(X_test_temp.shape[0]):
  my_image = X_test_temp[i]
  normalized_image = (my_image - np.mean(my_image))/np.std(my_image)
  flatten_image = normalized_image.flatten()
  test_data.append(flatten_image)
testX = np.array(test_data)

train_data = []
for i in range(X_train_temp.shape[0]):
  my_image = X_train_temp[i]
  normalized_image = (my_image - np.mean(my_image))/np.std(my_image)
  flatten_image = normalized_image.flatten()
  train_data.append(flatten_image)
trainX = np.array(train_data)

print("Number of training sample: ", len(trainX))
print("Number of testing sample: ", len(testX))

"""#### __NN Implementation__
Your implementation of NN needs to use the `sigmoid` activation function for all hidden layers and the `softmax` activation function for the output layer. The NN model you will be creating here will consits of only three layers: 1 input layer, n hidden layers (where you have the liberty to define n) and 1 output layer.
"""

class LessHiddenLayers(Exception):
    def __init__(self, message):
      self.message = message

class NeuralNetwork():
    @staticmethod
    def cross_entropy_loss(y_pred, y_true):
        # implement cross_entropy_loss function
        #TO DO
        entropy_loss = -(y_true * np.log(y_pred)).sum()
        return entropy_loss

    @staticmethod
    def accuracy(y_pred, y_true):
        # implement accuracy function
        #TO DO
        accuracy = np.sum(y_pred == y_true)
        return (accuracy/y_pred.shape[0]) * 100

    @staticmethod
    def softmax(x):
        # implement softmax function
        #TO DO
        take_exponent = np.exp(x)
        soft_max = take_exponent / take_exponent.sum(axis=1, keepdims=True)
        return soft_max

    @staticmethod
    def sigmoid(x):
        #TO DO
        sigmoid_function = 1/(1 + np.exp(-x))
        return sigmoid_function

    def __init__(self, nodes_per_layer):
        '''Creates a Feed-Forward Neural Network.
        The parameters represent the number of nodes in each layer. 
        Look at the inputs to the function, and use 'try and accept'
        to catch errors if number of layers are < 2.
        '''
        error = False
        try:
          if len(nodes_per_layer) == 3:
            raise Exception
          self.num_layers = len(nodes_per_layer) # including input and output layers
          self.nodes_per_layer = nodes_per_layer
          self.input_shape = nodes_per_layer[0]
          self.output_shape = nodes_per_layer[-1]

          self.weights_ = []
          self.biases_ = []
          self.__init_weights(nodes_per_layer)
        except:
          error = True
        
        if error:
          raise LessHiddenLayers("Number of hidden layers should be more than 1.")

    def __init_weights(self, nodes_per_layer):
        '''Initializes all weights based on standard normal distribution and all biases to 0.'''
        '''Initialize weights for each layer except the input layer, since it does not have weights.'''
        
        ###### Code Here ######
        for i in range(1, len(nodes_per_layer) - 1):
          W_h = np.random.normal(size=(nodes_per_layer[i - 1], nodes_per_layer[i])) * np.sqrt(2/(nodes_per_layer[i - 1] + nodes_per_layer[i]))
          b_h = np.zeros(shape=(nodes_per_layer[i],))
          self.weights_.append(W_h)
          self.biases_.append(b_h)

        W_o = np.random.normal(size=(nodes_per_layer[len(nodes_per_layer) - 2], nodes_per_layer[-1])) * np.sqrt(2/(nodes_per_layer[len(nodes_per_layer) - 2] + nodes_per_layer[-1]))
        b_o = np.zeros(shape=(nodes_per_layer[-1],))
        self.weights_.append(W_o)
        self.biases_.append(b_o)
       
    def forward_pass(self, input_data):
        '''Executes the feed forward algorithm.
        "input_data" is the input to the network in row-major form
        Returns "activations", which is a list of all layer outputs (excluding input layer of course)'''
        
        ###### Code Here ######
        activations = []
        hidden_layer_activations = input_data
        for i in range(0, len(self.weights_) - 1):
          hidden_layer_activations = np.matmul(hidden_layer_activations, self.weights_[i]) + self.biases_[i]
          hidden_layer_activations = self.sigmoid(hidden_layer_activations)
          activations.append(hidden_layer_activations)

        output_layer_activations = np.matmul(hidden_layer_activations, self.weights_[-1]) + self.biases_[-1]
        output_layer_activations = self.softmax(output_layer_activations)
        activations.append(output_layer_activations)

        return activations

    def backward_pass(self, targets, layer_activations):
        '''Executes the backpropogation algorithm.
        "targets" is the ground truth/labels
        "layer_activations" are the return value of the forward pass step
        Returns "deltas", which is a list containing weight update values for all layers (excluding the input layer of course)'''
        
        ###### Code Here ######
        deltas = []
        dError_dOutput = layer_activations[-1] - targets
        dError_dInput = dError_dOutput
        deltas.append(dError_dInput)

        hidden_layer_number = len(layer_activations) - 2
        for i in range(len(self.weights_) - 1, 0, -1):
          dError_dOutput = np.matmul(dError_dInput, self.weights_[i].T)     
          dOutput_dInput = np.multiply(layer_activations[hidden_layer_number], (1 - layer_activations[hidden_layer_number]))
          hidden_layer_number -= 1
          dError_dInput = np.multiply(dOutput_dInput, dError_dOutput)
          deltas.append(dError_dInput)

        return deltas
    
    def weight_update(self, deltas, layer_inputs, lr):
        '''Executes the gradient descent algorithm.
        "deltas" is return value of the backward pass step
        "layer_inputs" is a list containing the inputs for all layers (including the input layer)
        "lr" is the learning rate'''
        
        ###### Code Here ######
        weight_number = 0
        layer_number = 0
        for i in range(len(deltas) - 1, 0, -1):
          dInput_dWeight = layer_inputs[layer_number]
          dError_dweight = np.matmul(dInput_dWeight.T, deltas[i])
          self.weights_[weight_number] = self.weights_[weight_number] - (lr * dError_dweight)
          self.biases_[weight_number] = self.biases_[weight_number] - (lr * np.sum(deltas[i], axis=0))
          weight_number += 1
          layer_number += 1
        
        dInput_dWeight = layer_inputs[-1]
        dError_dweight = np.matmul(dInput_dWeight.T, deltas[0])
        self.weights_[-1] = self.weights_[-1] - (lr * dError_dweight)
        self.biases_[-1] = self.biases_[-1] -  (lr * np.sum(deltas[0], axis=0))


    ###### Do Not Change Anything Below this line in This Cell ######
    
    def fit(self, Xs, Ys, epochs, lr=1e-3):
            history = []
            for epoch in tqdm_notebook(range(epochs)):
                num_samples = Xs.shape[0]
                for i in range(num_samples):

                    sample_input = Xs[i,:].reshape((1,self.input_shape))
                    sample_target = Ys[i,:].reshape((1,self.output_shape))
                    
                    activations = self.forward_pass(sample_input)   # Call forward_pass function 
                    deltas = self.backward_pass(sample_target, activations)    # Call backward_pass function 
                    layer_inputs = [sample_input] + activations[:-1]
                    
                    # Call weight_update function 
                    self.weight_update(deltas, layer_inputs, lr)
                
                preds = self.predict(Xs)   # Call predict function 

                current_loss = self.cross_entropy_loss(preds, Ys)
                
                if  epoch==epochs-1:
                  confusion_mat=confusion_matrix(Ys.argmax(axis=1), preds.argmax(axis=1),labels=np.arange(10))  
                  plot_confusion_matrix(confusion_mat)
                  report = classification_report(Ys, np_utils.to_categorical(preds.argmax(axis=1),num_classes=classes), target_names=class_labels)
                  print(report)
                history.append(current_loss)
            return history
    
    def predict(self, Xs):
        '''Returns the model predictions (output of the last layer) for the given "Xs".'''
        predictions = []
        num_samples = Xs.shape[0]
        for i in range(num_samples):
            sample = Xs[i,:].reshape((1,self.input_shape))
            sample_prediction = self.forward_pass(sample)[-1]
            predictions.append(sample_prediction.reshape((self.output_shape,)))
        return np.array(predictions)
    
    def evaluate(self, Xs, Ys):
        '''Returns appropriate metrics for the task, calculated on the dataset passed to this method.'''
        pred = self.predict(Xs)
        return self.cross_entropy_loss(pred, Ys), self.accuracy(pred.argmax(axis=1), Ys.argmax(axis=1))
    
    def plot_model(self, filename):
        '''Provide the "filename" as a string including file extension. Creates an image showing the model as a graph.'''
        graph = pydot.Dot(graph_type='digraph')
        graph.set_rankdir('LR')
        graph.set_node_defaults(shape='circle', fontsize=0)
        nodes_per_layer = [self.input_shape, self.hidden_shape, self.output_shape]
        for i in range(self.num_layers-1):
            for n1 in range(nodes_per_layer[i]):
                for n2 in range(nodes_per_layer[i+1]):
                    edge = pydot.Edge(f'l{i}n{n1}', f'l{i+1}n{n2}')
                    graph.add_edge(edge)
        graph.write_png(filename)

# These are what we call the hyperparameters (a.k.a Black Magic). You need to research on them and tweak them to see what generates the best result for you

EPOCH = 100           # must be an int
LEARNING_RATE = 0.001
nodes_per_layer = [784, 128, 32, 10]  #int values for nodes of each layer. # of hidden layers >= 2.

start = time.time()

# Instantiate the neural network with the number of nodes you choose per layer, right now it is done for three layers only.
nn = NeuralNetwork(nodes_per_layer=nodes_per_layer)
history = nn.fit(trainX, trainy, epochs=EPOCH, lr=LEARNING_RATE)
plt.plot(history);
plt.gca().set(xlabel='Epoch', ylabel='Cross-entropy', title='Training Plot {}'.format(rollnumber));
end = time.time()

print("Runtime of the algorithm is ", round((end - start),3)," seconds")

# print accuracy on test set here
print(nn.evaluate(testX, testy))